{"version":3,"sources":["components/ExchangeHeader/logo.svg","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/ExchangeHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tr","styled","div","TdL","TdR","TdA","Coin","props","name","ticker","percent_change","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","THeadDiv","HeadingDiv","CoinList","coinData","map","key","Section","section","Div","Button","AccountBalance","buttonText","content","amount","handleBalanceVisibilityChange","Img","img","Header","header","H1","h1","ExchangeHeader","className","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","percent_change_15m","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44f0073a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Tr = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\n\r\nconst TdL = styled.div`\r\n    border: 1px solid gray;\r\n    width: 15%;\r\n    text-align: left;\r\n    padding:1vh;\r\n    padding-left: 1vh;\r\n    margin: .3vh;\r\n`\r\n\r\nconst TdR = styled.div`\r\n    border: 1px solid gray;\r\n    width: 15%;\r\n    text-align: right;\r\n    padding:1vh;\r\n    padding-right: 1vh;\r\n    margin: .3vh;\r\n`\r\nconst TdA = styled.div`\r\n    // border: 1px solid gray;\r\n    width: 15%;\r\n    text-align: center;\r\n    padding:1vh;\r\n    padding-right: 1vh;\r\n    margin: .3vh;\r\n`\r\nexport default function Coin(props) {\r\n\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n\r\n        props.handleRefresh(props.tickerId)\r\n    }\r\n\r\n\r\n    return (\r\n        <Tr>\r\n            <TdL>{props.name}</TdL>\r\n            <TdL>{props.ticker}</TdL>\r\n            <TdR>{props.percent_change}</TdR>\r\n            <TdR>${props.price}</TdR>\r\n            {props.showBalance ? <TdR>{props.balance}</TdR> : <TdR>*****</TdR>}\r\n            <TdA>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleClick}>Refresh</button>\r\n                </form>\r\n            </TdA>\r\n        </Tr>\r\n    )\r\n\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    percent_change: PropTypes.number.isRequired\r\n}","import React from 'react'\r\nimport Coin from '../Coin/Coin'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Table = styled.div`\r\n\r\n    margin: 50px auto;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    width: 80%\r\n    \r\n`\r\nconst THeadDiv = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1vh;\r\n    width: 100%;\r\n    justify-content: center\r\n        \r\n`\r\nconst HeadingDiv = styled.div`\r\n    width: 16.66%;\r\n    font-size: 1.5rem;\r\n    border: 1px solid gray;\r\n    margin: .3vh;\r\n`\r\n\r\nexport default function CoinList (props) {\r\n\r\n    return (\r\n        <Table>\r\n        \r\n            <THeadDiv>\r\n                <HeadingDiv>Name</HeadingDiv>\r\n                <HeadingDiv>Ticker</HeadingDiv>\r\n                <HeadingDiv>% 15m</HeadingDiv>\r\n                <HeadingDiv>Price</HeadingDiv>\r\n                <HeadingDiv>Balance</HeadingDiv>\r\n                {/* {props.showBalance ? <div>Balance</div> : null} */}\r\n                <HeadingDiv>Actions</HeadingDiv>\r\n            </THeadDiv>\r\n          \r\n            \r\n            <div>\r\n\r\n                {\r\n                    props.coinData.map( ({key, name, ticker, percent_change, price, balance}) => \r\n                        <Coin \r\n                            key={key} \r\n                            handleRefresh={props.handleRefresh} \r\n                            name={name} \r\n                            ticker={ticker} \r\n                            percent_change={percent_change}\r\n                            showBalance={props.showBalance}\r\n                            balance={balance}\r\n                            price={price}\r\n                            tickerId={key}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </div>\r\n        </Table>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Section = styled.section`\r\n    padding: 3vh 0;\r\n    background-color: #61dafb;\r\n    display:flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst Div = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-size: 3vh;\r\n    width: 80%;\r\n    background-color: #61dafb;\r\n\r\n`\r\nconst Button = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2vh;\r\n    color: white;\r\n    width: 250px;\r\n    padding: 1vh 0;\r\n    background-color: #333;\r\n    border: 3px solid white;\r\n    border-radius: 25px;\r\n    cursor: pointer;\r\n`\r\n\r\n\r\nexport default function AccountBalance (props) {\r\n\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance'\r\n    let content = <Div>Balance: $ *****</Div>\r\n    if ( props.showBalance ) {\r\n        content = <Div>Balance: $ {props.amount}</Div>\r\n    }\r\n    return (\r\n        <Section>     \r\n            <Div>     \r\n                {content}                  \r\n                <Button onClick={props.handleBalanceVisibilityChange}>{buttonText}</Button>\r\n            </Div>\r\n        </Section>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React, { Component } from 'react'\r\nimport logo from './logo.svg'\r\nimport styled from 'styled-components'\r\n\r\nconst Img = styled.img`\r\n    height: 8rem;\r\n    pointer-events: none;\r\n`\r\n\r\nconst Header = styled.header`\r\n    background-color: #333;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    color: white;ne;\r\n`\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 4rem;\r\n`\r\n  \r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header className=\"App-header\">\r\n                <Img src={logo} alt=\"React logo\" />\r\n                <H1>\r\n                    Coin Exchange\r\n                </H1>\r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport CoinList from './components/CoinList/CoinList'\r\nimport AccountBalance from './components/AccountBalance/AccountBalance'\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nconst Div = styled.div`\r\n\ttext-align: center;\r\n\tbackground-color: lightgray;\r\n`\r\nconst COIN_COUNT = 10\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(4))\r\n\r\nfunction App(props) {\r\n    \r\n    const [balance, setBalance] = useState(10000)\r\n    const [showBalance, setShowBalance] = useState(false)\r\n    const [coinData, setCoinData] = useState([])\r\n\r\n/*    \r\n    useEffect(function() {\r\n        if (coinData.length === 0) {\r\n            // Component did mount\r\n        } else {\r\n            // component did update\r\n        }\r\n    })\r\n*/\r\n\r\n\r\n    // return value of async is wrapped in promise\r\n\t\r\n    const componentDidMount = async () => {\r\n        const response = await axios.get('https://api.coinpaprika.com/v1/coins')\r\n        const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id)\r\n        const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/'\r\n        const promises = coinIds.map(id => axios.get(tickerUrl + id))\r\n        const coinData = await Promise.all(promises)\r\n        const coinPriceData = coinData.map(function(response) {\r\n            const coin = response.data\r\n            return {\r\n                key: coin.id,\r\n                name: coin.name,\r\n                ticker: coin.symbol,\r\n                percent_change: coin.quotes.USD.percent_change_15m,\r\n                balance: 0,\r\n                price: formatPrice(coin.quotes.USD.price)\r\n            }\r\n        })\r\n        // Retrieve the prices\r\n        setCoinData(coinPriceData)\r\n    }\r\n\r\n\r\n\r\n    useEffect(function() {\r\n        if (coinData.length === 0) {\r\n            componentDidMount()\r\n        }\r\n    })\r\n\r\n\r\n\r\n \r\n\r\n\tconst handleBalanceVisibilityChange = () => {\r\n        setShowBalance(oldValue => !oldValue)\r\n\t}\r\n\r\n\r\n\r\n\tconst handleRefresh = async (valueChangeId) => {\r\n        const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`\r\n        const response = await axios.get(tickerUrl)\r\n        const newPrice = formatPrice(response.data.quotes.USD.price)\r\n\t\tconst newCoinData = coinData.map( function( values ) {\r\n\t\t\tlet newValues = { ...values }\r\n\t\t\tif ( valueChangeId === values.key ) {\r\n\t\t\t\tnewValues.price = newPrice\r\n\t\t\t}\r\n\t\t\treturn newValues\r\n\t\t} )\r\n\r\n        setCoinData(newCoinData)\r\n\t}\r\n\r\n\r\n\r\n    return (\r\n        <Div className=\"App\">\r\n            <ExchangeHeader />\r\n            <AccountBalance \r\n                amount={balance} \r\n                showBalance={showBalance} \r\n                handleBalanceVisibilityChange={handleBalanceVisibilityChange} \r\n            />\r\n            <CoinList \r\n                coinData={coinData} \r\n                showBalance={showBalance}\r\n                handleRefresh={handleRefresh} \r\n            />\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}